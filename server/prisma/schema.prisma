generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSchool {
  id         Int     @id @default(autoincrement())
  userId     Int
  school     String
  isSelected Boolean @default(false)
  user       User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, school])
}

model User {
  userId             Int               @id @default(autoincrement())
  cognitoId          String?           @unique
  username           String            @unique
  profilePictureUrl  String?
  teamId             Int?
  email              String            @unique
  firstName          String
  lastName           String
  subscriptionStatus String?
  selectedTrack      String?
  createdAt          DateTime          @default(now())
  attachments        Attachment[]
  comments           Comment[]
  assignedTasks      Task[]            @relation("TaskAssignee")
  authoredTasks      Task[]            @relation("TaskAuthor")
  taskAssignments    TaskAssignment[]
  userSchools        UserSchool[]
  userSchoolTasks    UserSchoolTasks[]
  userTasks          UserTasks[]
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  projectTeams ProjectTeam[]
  tasks        Task[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?
  status          String?
  priority        String?
  tags            String?
  startDate       DateTime?
  dueDate         DateTime?
  points          Int?
  projectId       Int
  authorUserId    Int
  assignedUserId  Int?
  attachments     Attachment[]
  comments        Comment[]
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  project         Project          @relation(fields: [projectId], references: [id])
  taskAssignments TaskAssignment[]
  userTasks       UserTasks[]
}

model UserTasks {
  id           Int          @id @default(autoincrement())
  userId       Int
  taskId       Int?
  status       String       @default("To Do")
  priority     String       @default("Medium")
  position     Int          @default(0)
  schoolTaskId Int?
  schoolTask   SchoolTasks? @relation(fields: [schoolTaskId], references: [id])
  task         Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, taskId], name: "unique_user_task")
  @@index([userId, status, position])
  @@index([userId, taskId])
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  taskId Int
  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [userId])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int
  task         Task    @relation(fields: [taskId], references: [id])
  uploadedBy   User    @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [userId])
}

model law_schools {
  id                        Int           @id @default(autoincrement())
  school                    String?       @unique
  personal_statement        String?
  diversity_statement       String?
  optional_statement_prompt String?
  letters_of_recommendation String?
  resume                    String?
  extras_addenda            String?
  application_fee           String?
  interviews                String?
  note                      String?
  schoolTasks               SchoolTasks[]
}

model SchoolTasks {
  id              Int               @id @default(autoincrement())
  schoolId        Int
  taskType        String
  isRequired      Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lawSchool       law_schools       @relation(fields: [schoolId], references: [id])
  userSchoolTasks UserSchoolTasks[]
  userTasks       UserTasks[]
}

model UserSchoolTasks {
  id           Int         @id @default(autoincrement())
  userId       Int
  schoolTaskId Int
  status       String      @default("To Do")
  priority     String      @default("Medium")
  position     Int         @default(0)
  schoolTask   SchoolTasks @relation(fields: [schoolTaskId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, schoolTaskId], name: "unique_user_school_task")
  @@index([userId, status, position])
  @@index([userId, schoolTaskId])
}
