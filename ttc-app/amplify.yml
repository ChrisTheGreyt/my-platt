version: 1
applications:
  - appRoot: ttc-app
    frontend:
      phases:
        preBuild:
          commands:
            # Clean install with more aggressive cleanup
            - npm cache clean --force
            - rm -rf node_modules package-lock.json .next
            # Create ESLint config to be more permissive during build
            - |
              echo '{
                "extends": [
                  "next/core-web-vitals",
                  "plugin:@typescript-eslint/recommended"
                ],
                "parser": "@typescript-eslint/parser",
                "plugins": ["@typescript-eslint"],
                "rules": {
                  "@typescript-eslint/no-unused-vars": "off",
                  "@typescript-eslint/no-explicit-any": "off",
                  "react/no-unescaped-entities": "off",
                  "@next/next/no-img-element": "off",
                  "react-hooks/exhaustive-deps": "off"
                }
              }' > .eslintrc.json
            # Create TypeScript config
            - |
              echo '{
                "compilerOptions": {
                  "target": "es5",
                  "lib": ["dom", "dom.iterable", "esnext"],
                  "allowJs": true,
                  "skipLibCheck": true,
                  "strict": true,
                  "forceConsistentCasingInFileNames": true,
                  "noEmit": true,
                  "esModuleInterop": true,
                  "module": "esnext",
                  "moduleResolution": "node",
                  "resolveJsonModule": true,
                  "isolatedModules": true,
                  "jsx": "preserve",
                  "incremental": true,
                  "plugins": [
                    {
                      "name": "next"
                    }
                  ],
                  "paths": {
                    "@/*": ["./src/*"]
                  }
                },
                "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
                "exclude": ["node_modules"]
              }' > tsconfig.json
            # Update package.json to include ESLint plugins
            - |
              echo "Updating package.json..."
              node -e '
                const fs = require("fs");
                const pkg = JSON.parse(fs.readFileSync("package.json"));
                // Move everything to regular dependencies
                pkg.dependencies = {
                  ...pkg.dependencies,
                  "typescript": "5.3.3",
                  "eslint": "8.56.0",
                  "eslint-config-next": "14.2.10",
                  "@typescript-eslint/parser": "^7.0.0",
                  "@typescript-eslint/eslint-plugin": "^7.0.0",
                  "@types/node": "^20",
                  "@types/react": "^18",
                  "@types/react-dom": "^18",
                  "tailwindcss": "3.4.1",
                  "postcss": "8.4.35",
                  "autoprefixer": "10.4.17"
                };
                // Clean up devDependencies
                delete pkg.devDependencies;
                fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
                console.log("Updated package.json:", JSON.stringify(pkg, null, 2));
              '
            # Install all dependencies
            - npm install --legacy-peer-deps
            # Create PostCSS config
            - |
              echo "module.exports = {
                plugins: {
                  tailwindcss: {},
                  autoprefixer: {},
                }
              }" > postcss.config.js
            # Add environment variable
            - echo "DISABLE_UPLOAD=true" >> .env
            # Create next.config.js if it doesn't exist
            - |
              if [ ! -f next.config.js ]; then
                echo "/** @type {import('next').NextConfig} */
                const nextConfig = {
                  webpack: (config) => {
                    config.resolve.alias = {
                      ...config.resolve.alias,
                      '@': path.join(__dirname, 'src')
                    };
                    return config;
                  }
                };
                module.exports = nextConfig;" > next.config.js
              fi
        build:
          commands:
            - export NODE_PATH=$NODE_PATH:$(pwd)/src:$(pwd)/node_modules
            - NODE_ENV=production npm run build
      artifacts:
        baseDirectory: .next
        files:
          - '**/*'
      cache:
        paths:
          - node_modules/**/*
          - .npm/**/* 