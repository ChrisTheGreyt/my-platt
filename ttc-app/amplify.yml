version: 1
applications:
  - appRoot: ttc-app
    frontend:
      phases:
        preBuild:
          commands:
            # Clean install with more aggressive cleanup
            - npm cache clean --force
            - rm -rf node_modules package-lock.json .next
            # Update package.json - fix dependencies
            - |
              echo "Updating package.json..."
              node -e '
                const fs = require("fs");
                const pkg = JSON.parse(fs.readFileSync("package.json"));
                // Clean up any duplicates
                delete pkg.devDependencies.tailwindcss;
                delete pkg.devDependencies.postcss;
                delete pkg.dependencies.typescript;
                // Set up dev dependencies
                pkg.devDependencies = {
                  ...pkg.devDependencies,
                  "typescript": "5.3.3",
                  "eslint": "8.56.0",
                  "eslint-config-next": "14.2.10",
                  "@types/node": "^20",
                  "@types/react": "^18",
                  "@types/react-dom": "^18"
                };
                // Set up dependencies
                pkg.dependencies = {
                  ...pkg.dependencies,
                  "tailwindcss": "3.4.1",
                  "postcss": "8.4.35",
                  "autoprefixer": "10.4.17"
                };
                fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
                console.log("Updated package.json:", JSON.stringify(pkg, null, 2));
              '
            # Install everything at once
            - npm install --legacy-peer-deps
            # Verify the installation worked
            - echo "=== Node Modules Check ==="
            - test -d node_modules/typescript || exit 1
            - test -d node_modules/eslint || exit 1
            - test -d node_modules/tailwindcss || exit 1
            # Create postcss.config.js
            - |
              echo "module.exports = {
                plugins: {
                  tailwindcss: {},
                  autoprefixer: {},
                }
              }" > postcss.config.js
            # Add environment variable
            - echo "DISABLE_UPLOAD=true" >> .env
            # Create next.config.js if it doesn't exist
            - |
              if [ ! -f next.config.js ]; then
                echo "/** @type {import('next').NextConfig} */
                const nextConfig = {
                  webpack: (config) => {
                    config.resolve.alias = {
                      ...config.resolve.alias,
                      '@': path.join(__dirname, 'src')
                    };
                    return config;
                  }
                };
                module.exports = nextConfig;" > next.config.js
              fi
        build:
          commands:
            - export NODE_PATH=$NODE_PATH:$(pwd)/src:$(pwd)/node_modules
            - NODE_ENV=production npm run build
      artifacts:
        baseDirectory: .next
        files:
          - '**/*'
      cache:
        paths:
          - node_modules/**/*
          - .npm/**/* 